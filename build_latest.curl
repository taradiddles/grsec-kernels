#!/bin/sh

# ivan - feb 2015
# gpl

# automate a grsecurity kernel build
#
# Usage: build_lastest [ kconfig_file ]
# 
# without argument, only prepare the build environment, otherwise
# prepare the environment and build with the supplied kernel config
#
# note: the script doesn't delete anything and will when files/folders
#   already exist
#
# you'll need to import the relevant keys to for kernel gpg verify
# ( https://www.kernel.org/category/signatures.html )


GR_DIR="/home/build/kernel-grsec/automate"
GR_BZIMAGE_DIR="$GR_DIR/target"
MAKE_FLAGS=""

K_MINOR=14		# which 3.x stable version to use

# debug stuff
DISABLE_PREP=		# skip prep and build steps (=only download/gpgcheck)
DISABLE_DL_GRSEC=	# skip download grsec patches
DISABLE_DL_KMINOR=	# skip download kernel 3.x version
DISABLE_DL_KPATCH=	# skip download latest kernel patch
DISABLE_GPG_GRSEC=	# skip verify grsec sig
DISABLE_GPG_KMINOR=	# skip verify kernel 3.x sig
DISABLE_GPG_KPATCH=	# skip verify kernel patch sig

# comment if you don't use devtoolset (for gcc plugin)
PATH=/opt/rh/devtoolset-2/root/usr/bin/:$PATH
export PATH
export LDFLAGS=-L/opt/rh/devtoolset-2/root/usr/lib
export CPPFLAGS=-isystem/opt/rh/devtoolset-2/root/usr/include
export CC=/opt/rh/devtoolset-2/root/usr/bin/gcc
export CPP=/opt/rh/devtoolset-2/root/usr/bin/cpp
export CXX=/opt/rh/devtoolset-2/root/usr/bin/c++

# -----------------------------

err() {
	echo -e "$*" >&2
	exit 1
}

disp() {
	echo -e "$*" >&2
}

fetchfile() {
	local url=$1
	local dest=$2
	local curlopts=$3
	[ -z "$url" -o -z "$dest" ] && err "Usage: fetchfile url dest"
	if [ -e "$dest" ]; then
		disp "   $dest exists"
	else
		curl $curlopts "$url" -o "$dest" || err "   couldn't download $url"
		[ -e "$dest" ] || err "   curl error"
	fi
}

__prep() {
	disp "Decompressing kernel into $GR_DIR"
	tar -xJf "$GR_DIR/$K_STABLE" -C "$GR_DIR" || err "Couldn't tar xJf $GR_DIR/$K_STABLE"
	[ -d "$GR_DIR/linux-3.${K_MINOR}" ] || err "No $GR_DIR/linux-3.${K_MINOR} after unxz"
	disp "Patching kernel to version $K_VER"
	unxz -c "$GR_DIR/$K_PATCH" | patch -s -d "$GR_DIR/linux-3.${K_MINOR}" -p1 || err "Couldn't patch kernel to $K_VER"
	disp "Patching kernel with grsecurity"
	patch -s -d "$GR_DIR/linux-3.${K_MINOR}" -p1 < "$GR_DIR/$GR_PATCH" || err "Couldn't patch kernel with grsecurity"
	disp "Fixing menuconfig"
	sed -i -e '/^HOSTLOADLIBES_mconf.*HOSTCC)/ s/$/ -ltinfo/' "$GR_DIR/linux-3.${K_MINOR}/scripts/kconfig/Makefile"
	mv "$GR_DIR/linux-3.${K_MINOR}" "$GR_DIR/linux-$K_VER"
	disp "Building dir is $GR_DIR/linux-$K_VER"
}

__build() {
	local target_name="$(basename "$K_CONFIG")-$K_VER-$(date +%s)"
	[ -e "$K_CONFIG" ] || err "'$K_CONFIG' doesn't exist"
	[ -e "$GR_DIR/linux-$K_VER/.config" ] &&
		err "$GR_DIR/linux-$K_VER/.config already exists"
	cp "$K_CONFIG" $GR_DIR/linux-$K_VER/.config ||
		err "Couldn't copy '$K_CONFIG' to $GR_DIR/linux-$K_VER/.config"
	# use make oldnoconfig ; assume the config is for that specific kernel version
	disp "make oldnoconfig"
	make -C "$GR_DIR/linux-$K_VER" oldnoconfig || err "make oldnoconfig failed"
	disp "make"
	make -C "$GR_DIR/linux-$K_VER" $MAKE_FLAGS || err "'make $MAKE_FLAGS' failed"
	mkdir -p "$GR_BZIMAGE_DIR"
	cp "$GR_DIR/linux-$K_VER/arch/x86/boot/bzImage" "$GR_BZIMAGE_DIR/$target_name" ||
		err "Couldn't copy $GR_DIR/linux-$K_VER/arch/x86/boot/bzImage to $GR_BZIMAGE_DIR/$target_name"
	disp "bzImage: $GR_BZIMAGE_DIR/$target_name"
}

# -----------------------------

K_CONFIG=$1

[ -n "$K_CONFIG" -a ! -e "$K_CONFIG" ] && err "Kernel config $K_CONFIG doesn't exist"

#------------------------------
# misc checks
[ -d "$GR_DIR" ] || err "No such dir: $GR_DIR"
[ -e "$GR_DIR/linux-3.${K_MINOR}" ] && err "Directory $GR_DIR/linux-3.${K_MINOR} exists ; remove first"

#------------------------------
# get latest versions
disp "Getting latest 3.${K_MINOR} patch version"
K_VER=$(curl -s https://www.kernel.org/releases.json | sed -ne "s/.*version.*\(3\.$K_MINOR\.[0-9]\+\)\".*/\1/p")
disp "   $K_VER"
[ -z "$K_VER" ] && err "Empty kernel version"
[ -e "$GR_DIR/linux-$K_VER" ] && err "Directory $GR_DIR/linux-$K_VER exists ; remove first"

disp "Getting latest grsecurity patch name"
GR_PATCH=$(curl -s https://grsecurity.net/latest_stable2_patch)
[ -z "$GR_PATCH" ] && err "Empty grsecurity version"
disp "   $GR_PATCH"

K_PATCH="patch-${K_VER}.xz"
K_PATCH_SIG="patch-${K_VER}.sign"
K_STABLE="linux-3.${K_MINOR}.tar.xz"
K_STABLE_SIG="linux-3.${K_MINOR}.tar.sign"

#------------------------------
# latest grsecurity patch
if [ -z "$DISABLE_DL_GRSEC" ]; then
	disp "Fetching grsecurity latest patch"
	fetchfile "https://grsecurity.net/stable/$GR_PATCH" "$GR_DIR/$GR_PATCH"
	fetchfile "https://grsecurity.net/stable/$GR_PATCH.sig" "$GR_DIR/$GR_PATCH.sig"
	if [ -z "$DISABLE_GPG_GRSEC" ]; then
		gpg -q --verify "$GR_DIR/$GR_PATCH.sig" || err "Couldn't verify grsecurity sig"
	fi
fi

#------------------------------
# latest 3.${K_MINOR}.y kernel patch
if [ -z "$DISABLE_DL_KPATCH" ]; then
	disp "Fetching latest kernel patch"
	fetchfile "https://www.kernel.org/pub/linux/kernel/v3.x/$K_PATCH" "$GR_DIR/$K_PATCH"
	fetchfile "https://www.kernel.org/pub/linux/kernel/v3.x/$K_PATCH_SIG" "$GR_DIR/$K_PATCH_SIG"
	if [ -z "$DISABLE_GPG_KPATCH" ]; then
		unxz -c "$GR_DIR/$K_PATCH" | gpg2 -q --verify "$GR_DIR/$K_PATCH_SIG" -  ||
			err "Couldn't verify kernel patch sig"
	fi
fi

#------------------------------
# 3.${K_MINOR} kernel
if [ -z "$DISABLE_DL_KMINOR" ]; then
	disp "Fetching kernel $K_STABLE"
	fetchfile "https://www.kernel.org/pub/linux/kernel/v3.x/$K_STABLE" "$GR_DIR/$K_STABLE"
	fetchfile "https://www.kernel.org/pub/linux/kernel/v3.x/$K_STABLE_SIG" "$GR_DIR/$K_STABLE_SIG"
	if [ -z "$DISABLE_GPG_KMINOR" ]; then
		unxz -c "$GR_DIR/$K_STABLE" | gpg2 -q --verify "$GR_DIR/$K_STABLE_SIG" -  ||
			err "Couldn't verify kernel sig"
	fi
fi

#------------------------------
# prepare the build environment
[ -n "$DISABLE_PREP" ] && disp "DISABLE_PREP set; exiting" && exit 0
__prep 

#------------------------------
# build if we have a supplied config file
[ -n "$K_CONFIG" ] && __build 

exit 0

