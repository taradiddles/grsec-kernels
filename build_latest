#!/bin/sh

# ivan - feb 2015
# gpl

# automate a grsecurity kernel build
#
# Usage: build_lastest [ kconfig_file ]
# 
# without argument, only prepare the build environment, otherwise
# prepare the environment and build with the supplied kernel config
#
# you can skip the prepare step by setting the env variable
# DISABLE_PREP to some empty value
# 
# the script doesn't download the 3.14 kernel, so you MUST
# have linux-3.14.tar.xz in $GR_DIR
#
# ( https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.14.tar.xz )

GR_DIR=/home/build/kernel-grsec/automate
GR_BZIMAGE_DIR=$GR_DIR/target
MAKE_FLAGS=""

PATH=/opt/rh/devtoolset-2/root/usr/bin/:$PATH
export PATH
export LDFLAGS=-L/opt/rh/devtoolset-2/root/usr/lib
export CPPFLAGS=-isystem/opt/rh/devtoolset-2/root/usr/include
export CC=/opt/rh/devtoolset-2/root/usr/bin/gcc
export CPP=/opt/rh/devtoolset-2/root/usr/bin/cpp
export CXX=/opt/rh/devtoolset-2/root/usr/bin/c++

# -----------------------------

err() {
	echo -e "$*" >&2
	exit 1
}

disp() {
	echo -e "$*" >&2
}

__prep() {
	[ -e "$GR_DIR/linux-$K_VER" ] && err "Directory $GR_DIR/linux-$K_VER exists ; remove first"

	# untar / patch
	disp "Decompressing kernel into $GR_DIR"
	tar -xJf "$GR_DIR/linux-3.14.tar.xz" -C "$GR_DIR" || err "Couldn't tar xJf $GR_DIR/linux-3.14.tar.xz"
	disp "Patching kernel to version $K_VER"
	unxz -c "$GR_DIR/$K_PATCH" | patch -s -d "$GR_DIR/linux-3.14" -p1 || err "Couldn't patch kernel to $K_VER"
	disp "Patching kernel with grsecurity"
	patch -s -d "$GR_DIR/linux-3.14" -p1 < "$GR_DIR/$GR_PATCH" || err "Couldn't patch kernel with grsecurity"
	disp "Fixing menuconfig"
	sed -i -e '/^HOSTLOADLIBES_mconf.*HOSTCC)/ s/$/ -ltinfo/' "$GR_DIR/linux-3.14/scripts/kconfig/Makefile"
	mv "$GR_DIR/linux-3.14" "$GR_DIR/linux-$K_VER"
	disp "Building dir is $GR_DIR/linux-$K_VER"

}

__build() {
	local target_name="$(basename "$K_CONFIG")-$(date +%s)"
	[ -e "$K_CONFIG" ] || err "'$K_CONFIG' doesn't exist"
	[ -e "$GR_DIR/linux-$K_VER/.config" ] &&
		err "$GR_DIR/linux-$K_VER/.config already exists"
	cp "$K_CONFIG" $GR_DIR/linux-$K_VER/.config ||
		err "Couldn't copy '$K_CONFIG' to $GR_DIR/linux-$K_VER/.config"
	# use make oldnoconfig ; assume the config is for that specific kernel version
	disp "make oldnoconfig"
	make -C "$GR_DIR/linux-$K_VER" oldnoconfig || err "make oldnoconfig failed"
	disp "make"
	make -C "$GR_DIR/linux-$K_VER" $MAKE_FLAGS || err "'make $MAKE_FLAGS' failed"
	cp "$GR_DIR/linux-$K_VER/arch/x86/boot/bzImage" "$GR_BZIMAGE_DIR/$target_name" ||
		err "Couldn't copy $GR_DIR/linux-$K_VER/arch/x86/boot/bzImage to $GR_BZIMAGE_DIR/$target_name"
	disp "bzImage is $GR_BZIMAGE_DIR/$target_name"

}

# -----------------------------

K_CONFIG=$1

[ -n "$K_CONFIG" -a ! -e "$K_CONFIG" ] && err "Kernel config $K_CONFIG doesn't exist"

# misc checks
[ -d "$GR_DIR" ] || err "No such dir: $GR_DIR"
# https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.14.tar.xz"
[ -e "$GR_DIR/linux-3.14.tar.xz" ] || err "Missing linux-3.14.tar.xz in $GR_DIR"
[ -e "$GR_DIR/linux-3.14" ] && err "Directory $GR_DIR/linux-3.14 exists ; remove first"

# get latest 3.0-3.14 grsecurity patch
GR_PATCH=$(curl -s https://grsecurity.net/latest_stable2_patch)
#GR_PATCH="grsecurity-3.0-3.14.31-201502052352.patch"
[ -z "$GR_PATCH" ] && err "Empty grsecurity version"
disp "Fetching grsecurity latest patch - $GR_PATCH"
if [ -e "$GR_DIR/$GR_PATCH" ]; then
	disp "   exists"
else
	curl "https://grsecurity.net/stable/$GR_PATCH" -o "$GR_DIR/$GR_PATCH" ||
		err "Couldn't download"
fi

# get latest 3.14.x kernel patch (based on 3.14)
# "version": "3.14.31", 
K_VER=$(curl -s https://www.kernel.org/releases.json | sed -ne 's/.*version.*\(3\.14\.[0-9]\+\)".*/\1/p')
[ -z "$GR_PATCH" ] && err "Empty grsecurity version"
K_PATCH="patch-${K_VER}.xz"
disp "Fetching latest kernel patch - $K_PATCH"
if [ -e "$GR_DIR/$K_PATCH" ]; then
	disp "   exists"
else
	curl "https://www.kernel.org/pub/linux/kernel/v3.x/$K_PATCH" -o "$GR_DIR/$K_PATCH" ||
		err "Couldn't download"
fi

# don't prepare the build environment if DISABLE_PREP is set (debugging)
[ -z "$DISABLE_PREP" ] && __prep || disp "DISAPLE_PREP set - assuming build environment was set up"

# don't build if user hasn't supplied config file
[ -z "$K_CONFIG" ] && exit 0

__build

exit 0
